
local tArgs = {...}
local tDim = {}
local tPos = {}
tDim.row = tonumber(tArgs[1])
tDim.col = tonumber(tArgs[2])
tDim.lay = tonumber(tArgs[3])
tPos.row = 0
tPos.col = 1
tPos.lay = 1

local function displayPos()
	term.clear()
	term.setCursorPos(1, 1)
	print("Dimensions: ", tDim.lay, ", ", tDim.col, ", ", tDim.row)
	print("Coordinates: ", tPos.lay, ", ", tPos.col, ", ", tPos.row)
end

function turtle.turnAround()
	return turtle.turnLeft() and turtle.turnLeft()
end

local function move(_sFunc, _sDir, _nAmt)
	if not turtle[_sFunc]() then
		displayPos()
		error("Failed to move turtle", 2)
	end
	tPos[_sDir] = tPos[_sDir] + (_nAmt or 1)
	displayPos()
end

local function upAndDown(_bMineUp, _bMineDown)
	if _bMineUp then
		turtle.digUp()
	end
	if _bMineDown then
		turtle.digDown()
	end
end

local function mineRow(_bMineUp, _bMineDown)
	while tPos.row < tDim.row do
		upAndDown(_bMineUp, _bMineDown)
		turtle.dig()
		move("forward", "row")
	end
end

local function mineLayer(_bMineUp, _bMineDown)
	while tPos.col <= tDim.col do
		mineRow(_bMineUp, _bMineDown)
		if tPos.col < tDim.col then
			local sDir = tPos.col % 2 == 1 and "turnRight" or "turnLeft"
			turtle[sDir]()
			upAndDown(_bMineUp, _bMineDown)
			turtle.dig()
			move("forward", "col")
			tPos.row = 1
			displayPos()
			turtle[sDir]()
		else
			upAndDown(_bMineUp, _bMineDown)
			break
		end
	end
end

local function mineQuarry()
	mineLayer(true, true)
	while tPos.lay < tDim.lay - 1 do
		turtle.turnAround()
		move("down", "lay")
		turtle.digDown()
		move("down", "lay")
		tPos.row = 1
		tPos.col = 1
		displayPos()
		if tPos.lay == tDim.lay then
			mineLayer(false, false)
		elseif tPos.lay == tDim.lay - 1 then
			mineLayer(false, true)
		else
			turtle.digDown()
			move("down", "lay")
			mineLayer(true, true)
		end
	end
end

turtle.dig()
move("forward", "row")
if tDim.lay > 1 then
	turtle.digDown()
	move("down", "lay")
end
mineQuarry()

--[[
turtle.turnLeft()
for nColumn = 1, tDim.col do
	move("forward", "col")
end
for nRow = 1, tDim.row do
	move("forward", "row")
end
for nLayer = 1, tDim.lay do
	move("up", "lay")
end
]]
